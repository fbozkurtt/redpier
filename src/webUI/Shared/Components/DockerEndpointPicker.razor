@implements IDisposable
@inject HttpClient Client
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService;

@if (!IsForMobile)
{
    <ul class="dropdown-menu" aria-labelledby="dockerEndpointPicker">
        @if (Endpoints != null)
        {
            @foreach (var endpoint in Endpoints.Items)
            {
                <li>
                    <a class="dropdown-item text-truncate" style="cursor: pointer" @onclick="e => SelectEndpoint(endpoint)">
                        <span class="fa fa-circle"
                              style="color: @(selectedEndpoint.Status.Equals(Status.Online) ? "#25e000" : "#ff3333")"
                              hidden="@(!selectedEndpoint.Id.Equals(endpoint.Id))">
                        </span>
                        <span class="fa fa-circle"
                              style="color: #8f8f8f"
                              hidden="@selectedEndpoint.Id.Equals(endpoint.Id)">
                        </span>
                        <span>@endpoint.Name</span>
                        <span class="@(selectedEndpoint.Id.Equals(endpoint.Id) ? "fa fa-check" : "")"></span>
                    </a>
                </li>
            }
        }
        else
        {
            <li>
                <div class="text-center dropdown-item">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </li>
        }
    </ul>
}
else
{
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" id="dockerEndpointPicker" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Docker endpoint
        </a>
        <div class="dropdown-menu dropdown-menu-nav" aria-labelledby="dockerEndpointPicker">
            <a class="dropdown-item">
                local<span class="fa fa-check pl-2"></span>
            </a>
            <a class="dropdown-item">local_windows</a>
        </div>
    </li>
}

@code{
    private Endpoint selectedEndpoint;

    private System.Threading.Timer timer;

    [Parameter]
    public bool IsForMobile { get; set; } = false;

    [Inject]
    public IEndpointService EndpointService { get; set; }

    public PaginatedListViewModel<Endpoint> Endpoints;

    protected override async Task OnInitializedAsync()
    {
        timer = new System.Threading.Timer(async (object stateInfo) =>
        {
            await Ping();
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(true), 1000, 5000);
        await FetchData();
    }

    public async Task FetchData()
    {

        try
        {
            Endpoints = await EndpointService.GetEndpointsAsync();

            if (Endpoints == null)
                return;

            var savedEndpoint = await EndpointService.GetSelectedEndpointAsync();
            if (savedEndpoint != default && Endpoints.Items.ToList().Contains(savedEndpoint))
            {
                selectedEndpoint = savedEndpoint;
            }
            else
            {
                await SelectEndpoint(Endpoints.Items.First());
            }
            if (await EndpointService.PingAsync())
                selectedEndpoint.Status = Status.Online;
        }
        catch (Exception ex)
        {
            //ToastService.ShowError(ex.Message);
            Console.WriteLine(ex.Message);
        }
    }

    public async Task Ping()
    {
        try
        {
            var result = await EndpointService.PingAsync();
            selectedEndpoint.Status = result ? Status.Online : Status.Offline;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task SelectEndpoint(Endpoint endpoint)
    {
        await EndpointService.SetSelectedEndpointAsync(endpoint);
        selectedEndpoint = endpoint;
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}
