@page "/networks/{id}"
@using Docker.DotNet.Models
@inherits BaseComponent

@if (PageLoaded)
{
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table table-sm">
                <thead class="thead-light">
                    <tr>
                        <th colspan="2">Details</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>Name</th>
                        <td>@Network.Name</td>
                    </tr>
                    <tr>
                        <th>ID</th>
                        <td>@Network.ID</td>
                    </tr>
                    <tr>
                        <th>Driver</th>
                        <td>@Network.Driver</td>
                    </tr>
                    <tr>
                        <th>Scope</th>
                        <td>@Network.Scope</td>
                    </tr>
                    <tr>
                        <th>Attachable</th>
                        <td>@Network.Attachable</td>
                    </tr>
                    <tr>
                        <th>Internal</th>
                        <td>@Network.Internal</td>
                    </tr>
                    @if (Network.IPAM.Config != null)
                    {
                        var config = Network.IPAM.Config.FirstOrDefault();

                        @if (config != null)
                        {
                            <tr>
                                <th>IPv4 Subnet</th>
                                <td>@config.Subnet</td>
                            </tr>
                            <tr>
                                <th>IPv4 Gateway</th>
                                <td>@config.Gateway</td>
                            </tr>
                            <tr>
                                <th>IPv4 IP Range</th>
                                <td>@(config.IPRange ?? "-")</td>
                            </tr>
                            if (config.AuxAddress != null)
                            {
                                <tr>
                                    <th>IPv4 Excluded Ips</th>
                                    <td>@(string.Join('\n', config.AuxAddress.Values))</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table table-sm">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 30%">Options</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var option in Network.Options)
                    {
                        <tr>
                            <td>
                                @option.Key
                            </td>
                            <td>@option.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table table-sm">
                <thead class="thead-light">
                    <tr>
                        <th colspan="4">Containers</th>
                    </tr>
                </thead>
                <thead>
                    <tr>
                        <th scope="col">Container Name</th>
                        <th scope="col">IPv4 Address</th>
                        <th colspan="2">Mac Address</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var container in Network.Containers)
                    {
                        <tr>
                            <td><a href="@($"containers/{container.Key}")">@container.Value.Name</a></td>
                            <td>@container.Value.IPv4Address</td>
                            <td>@container.Value.MacAddress</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="e=> Disconnect(container.Key)">
                                    <span class="fa fa-trash"></span> Remove
                                </button>
                            </td>
                        </tr>
                    }
                    @if (Network.Containers.Count == 0)
                    {
                        <tr>
                            <td colspan="4" class="text-center text-muted">No data</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12">
            <div class="text-center">
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    public INetworkService NetworkService { get; set; }

    [Parameter]
    public string Id { get; set; }

    public NetworkResponse Network { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
        PageLoaded = true;
    }

    public async Task FetchData()
    {
        Network = await NetworkService.InspectAsync(Id);
    }

    public async Task Disconnect(string containerId)
    {
        try
        {
            IsBusy = true;

            if (containerId != null)
            {
                var result = await NetworkService.DisconnectAsync(Network.ID, containerId);
                if (result)
                    ToastService.ShowSuccess("Container removed from the network");
            }
        }
        catch
        {
            ToastService.ShowError("An error occured while removing container from the network");
        }
        finally
        {
            await FetchData();
            IsBusy = false;
        }
    }
}