@page "/networks"
@using Docker.DotNet.Models
@inherits BaseComponentWithDataTable<NetworkResponse>

<ProgressBar ProgressBarMaxValue="SelectedItems.Count" ProgressBarValue="ProgressBarValue" ShowProgressBar="IsBusy"></ProgressBar>
<div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-danger" @onclick="e => RemoveNetworks()">
                <span class="fa fa-trash"></span> Remove
            </button>
        </div>
        <a class="btn btn-sm btn-success float-right" href="/networks/add">
            <span class="fa fa-plus"></span> Add network
        </a>

        <DataTableWithPagination Items="Items" TItem="NetworkResponse" Context="network" @bind-SelectedItems="SelectedItems" IsBusy="IsBusy" ColSpan="6" @ref="DataTable" PageSize="10">
            <TableHeader>
                <th scope="col">Name</th>
                <th scope="col">Stack</th>
                <th scope="col">Driver</th>
                <th scope="col">IPV4 IPAM Subnet</th>
                <th scope="col">IPV4 IPAM Gateway</th>
            </TableHeader>
            <TableRow>
                <td><a href="@($"/networks/{network.ID}")">@network.Name</a></td>
                <td>-</td>
                <td>@network.Driver</td>
                @if (network.IPAM.Config != null && network.IPAM.Config.Count > 0)
                {
                    <td>@network.IPAM.Config.First().Subnet</td>
                    <td>@network.IPAM.Config.First().Gateway</td>
                }
                else
                {
                    <td>-</td>
                    <td>-</td>
                }
            </TableRow>
        </DataTableWithPagination>
    </div>
</div>

@code{
    [Inject]
    public INetworkService NetworkService { get; set; }

    public async Task RemoveNetworks()
    {
        try
        {
            IsBusy = true;
            foreach (var network in SelectedItems)
            {
                var result = await NetworkService.RemoveAsync(network.ID);

                if (result)
                    ToastService.ShowSuccess($"Removed {network.Name}");
                else
                    ToastService.ShowWarning($"An error occured while removing {network.Name}");

                ProgressBarValue += 1;
                StateHasChanged();
            }
        }
        catch
        {
            ToastService.ShowError("An error occured while removing network(s)");
        }
        finally
        {
            ProgressBarValue = 0;
            await FetchData();
            IsBusy = false;
        }
    }
}
