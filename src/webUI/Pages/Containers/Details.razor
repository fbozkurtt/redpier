@page "/containers/{Id}"
@using Docker.DotNet.Models
@inherits BaseComponent

@if (PageLoaded)
{
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table table-sm">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 15%">Status</th>
                        <th scope="col" style="width: 85%"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>Name</th>
                        <td>@Container.Name.Trim('/')</td>
                    </tr>
                    <tr>
                        <th>ID</th>
                        <td>@Container.ID</td>
                    </tr>
                    <tr>
                        <th>IP address</th>
                        <td>@Container.NetworkSettings.IPAddress</td>
                    </tr>
                    <tr>
                        <th>Status</th>
                        <td>@Container.State.Status</td>
                    </tr>
                    <tr>
                        <th>Created</th>
                        <td>@Container.Created.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    </tr>
                    <tr>
                        <th>Started</th>
                        <td>@(Convert.ToDateTime(Container.State.StartedAt).ToString("yyyy-MM-dd HH:mm:ss"))</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table table-sm">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 15%">Details</th>
                        <th scope="col" style="width: 85%"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>Image</th>
                        <td>@Container.Config.Image</td>
                    </tr>
                    <tr>
                        <th>Ports</th>
                        <td id="ports">
                            @foreach (var port in Container.NetworkSettings.Ports)
                            {
                                @if (port.Value != null)
                                {
                                    <div>
                                        @port.Value.First().HostIP:@port.Value.First().HostPort <i class="fa fa-long-arrow-alt-right"></i> @port.Key
                                    </div>
                                }
                            }
                        </td>
                    </tr>
                    <tr>
                        <th>Command</th>
                        <td>
                            <table class="table table-borderless table-sm m-0" hidden="@(Container.Config.Cmd == null)">
                                <tbody>
                                    @if (Container.Config.Cmd != null)
                                    {
                                        @foreach (var cmd in Container.Config.Cmd)
                                        {
                                            <tr>
                                                <td class="text-muted">
                                                    @cmd
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <th>Entrypoint</th>
                        <td>
                            <table class="table table-borderless table-sm m-0" hidden="@(Container.Config.Entrypoint == null)">
                                <tbody>
                                    @if (Container.Config.Entrypoint != null)
                                    {
                                        @foreach (var ep in Container.Config.Entrypoint)
                                        {
                                            <tr>
                                                <td>
                                                    @ep
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <th>Environment</th>
                        <td>
                            <table class="table table-borderless table-sm m-0" hidden="@(Container.Config.Env == null)">
                                <tbody>
                                    @if (Container.Config.Env != null)
                                    {
                                        @foreach (var env in Container.Config.Env)
                                        {
                                            <tr>
                                                <td class="text-muted" style="width: 50%">@env.Split('=')[0]</td>
                                                <td class="text-muted">@env.Split('=')[1]</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <th>Labels</th>
                        <td>
                            <table class="table table-borderless table-sm m-0" hidden="@(Container.Config.Labels == null)">
                                <tbody>
                                    @if (Container.Config.Labels != null)
                                    {
                                        @foreach (var label in Container.Config.Labels)
                                        {
                                            <tr>
                                                <td class="text-muted" style="width: 50%">@label.Key</td>
                                                <td class="text-muted">@label.Value</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <th>Restart behaviour</th>
                        <td>
                            <EditForm Model="_restartPolicy" OnValidSubmit="UpdateRestartPolicy" class="form-inline">
                                <InputRadioGroup @bind-Value="_restartPolicy">
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="RestartPolicyKind.No" class="form-check-input" />
                                        <label class="form-check-label">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="RestartPolicyKind.Always" class="form-check-input" />
                                        <label class="form-check-label">Always</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="RestartPolicyKind.OnFailure" class="form-check-input" />
                                        <label class="form-check-label">On failure</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="RestartPolicyKind.UnlessStopped" class="form-check-input" />
                                        <label class="form-check-label">Unless stopped</label>
                                    </div>
                                    <button type="submit" class="btn btn-sm btn-primary">Update</button>
                                </InputRadioGroup>
                            </EditForm>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table table-sm">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 15%">Mounts</th>
                        <th scope="col" style="width: 42.5%"></th>
                        <th scope="col" style="width: 42.5%"></th>
                    </tr>
                </thead>
                <thead>
                    <tr>
                        <th scope="col">Volume name</th>
                        <th scope="col">Host path</th>
                        <th scope="col">Container path</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var mount in Container.Mounts)
                    {
                        <tr>

                            @if (mount.Type.Equals("volume"))
                            {
                                <td>@mount.Name</td>
                            }
                            else
                            {
                                <td class="text-muted">(bind mount)</td>
                            }
                            <td>@mount.Source</td>
                            <td>@mount.Destination</td>
                        </tr>
                    }
                    @if (Container.Mounts.Count == 0)
                    {
                        <tr>
                            <td colspan="3" class="text-center text-muted">No data</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table table-sm">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Network</th>
                        <th colspan="2">
                            <select class="form-control" id="network" @bind="NetworkToConnect">
                                <option hidden disabled selected value="">Connect to a network</option>
                                @foreach (var network in Networks)
                                {
                                    <option value="@network.ID">@network.Name</option>
                                }
                            </select>
                        </th>
                        <th colspan="2" class="pb-2">
                            <button class="btn btn-sm btn-success" @onclick="e => Connect(NetworkToConnect)" disabled="@(string.IsNullOrWhiteSpace(NetworkToConnect) || IsBusy)">
                                <span class="fa fa-plus" /> Join
                            </button>
                        </th>
                    </tr>
                </thead>
                <thead>
                    <tr>
                        <th scope="col">Network</th>
                        <th scope="col">IP Address</th>
                        <th scope="col">Gateway</th>
                        <th scope="col">MAC Address</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var network in Container.NetworkSettings.Networks)
                    {
                        <tr>
                            <td><a href="@($"/networks/{network.Value.NetworkID}")">@network.Key</a></td>
                            <td>@network.Value.IPAddress</td>
                            <td>@network.Value.Gateway</td>
                            <td>@network.Value.MacAddress</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="e => Disconnect(network.Value.NetworkID)" disabled="@IsBusy">
                                    <span class="fa fa-trash"></span> Leave
                                </button>
                            </td>
                        </tr>
                    }
                    @if (Container.NetworkSettings.Networks.Count == 0)
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted">No data</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12">
            <div class="text-center">
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
    </div>
}

@code{

    private RestartPolicyKind _restartPolicy { get; set; }

    [Inject]
    public IContainerService ContainerService { get; set; }

    [Inject]
    public INetworkService NetworkService { get; set; }

    [Parameter]
    public string Id { get; set; }

    public ContainerInspectResponse Container { get; set; }

    public List<NetworkResponse> Networks { get; set; }

    public string NetworkToConnect { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
        PageLoaded = true;
    }

    public async Task FetchData()
    {
        try
        {
            IsBusy = true;
            Container = await ContainerService.InspectAsync(Id);
            Networks = await NetworkService.GetAllAsync();
            _restartPolicy = Container.HostConfig.RestartPolicy.Name;
        }
        catch
        {
            ToastService.ShowError("An error occured while getting data from server");
        }
        finally
        {
            IsBusy = false;
        }
    }

    public async Task Connect(string networkId)
    {
        try
        {
            IsBusy = true;
            if (networkId != null)
            {
                var result = await NetworkService.ConnectAsync(networkId, new NetworkConnectParameters() { Container = Container.ID });
                if (result)
                    ToastService.ShowSuccess("Connected to the network");
            }
        }
        catch
        {
            ToastService.ShowError("An error occured while connecting to the network");
        }
        finally
        {
            NetworkToConnect = string.Empty;
            await FetchData();
            IsBusy = false;
        }
    }

    public async Task Disconnect(string networkId)
    {
        try
        {
            IsBusy = true;

            if (networkId != null)
            {
                var result = await NetworkService.DisconnectAsync(networkId, Container.ID);
                if (result)
                    ToastService.ShowSuccess("Disconnected from the network");
            }
        }
        catch
        {
            ToastService.ShowError("An error occured while disconnecting from network");
        }
        finally
        {
            await FetchData();
            IsBusy = false;
        }
    }

    public async Task UpdateRestartPolicy()
    {
        var result = await ContainerService.UpdateAsync(Container.ID,
            new ContainerUpdateParameters()
            {
                RestartPolicy = new RestartPolicy() { Name = _restartPolicy }
            });

        if (result != null)
            ToastService.ShowSuccess("Restart policy updated");
    }
}
