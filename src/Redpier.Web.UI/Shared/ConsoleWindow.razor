@page "/console/{id}"
@inject IJSRuntime JS;
@layout EmptyLayout

<div class="box">
    <div class="console" id="consoleWindow">
        <input class="console-input" type="text" @onkeypress="e => KeyPress(e, 0)" id="input0" @onfocusout="e => FocusLost(e, 0)"/>
        <p class="console-response" id="response0" hidden />
        @foreach (var line in consoleLines)
        {
            if (line.Index == 0)
                continue;
            <input class="console-input" type="text"
                   @onkeypress="e => KeyPress(e, line.Index)"
                   disabled="@line.IsDisabled"
                   id="@("input" + line.Index.ToString())"
                   @onfocusout="e => FocusLost(e, line.Index)" />
            <p class="console-response" id="@("response" + line.Index.ToString())" hidden="@line.IsDisabled" />
        }
    </div>
</div>

@code{

    private IList<ConsoleLine> consoleLines;

    private int lineCount = 50;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("focusElement", "input0");
        await base.OnAfterRenderAsync(firstRender);
    }

    public ConsoleWindow()
    {
        consoleLines = new List<ConsoleLine>();

        for (int i = 0; i < lineCount; i++)
        {
            consoleLines.Add(new ConsoleLine(i));
        }
    }

    [Parameter]
    public string Id { get; set; }

    public async Task KeyPress(KeyboardEventArgs e, int index)
    {
        if (e.Key.Equals("Enter"))
        {
            Console.WriteLine(index);
            await JS.InvokeVoidAsync("disableElement", "input" + index.ToString());
            await JS.InvokeVoidAsync("showElement", "response" + index.ToString());
            await JS.InvokeVoidAsync("fillElement", "response" + index.ToString(), "this is a response " + index.ToString());
            if (index == lineCount - 1)
            {
                await JS.InvokeVoidAsync("enableElement", "input0");
                await JS.InvokeVoidAsync("clearInput", "input0");
                //await JS.InvokeVoidAsync("clearElement", "response0");
                await JS.InvokeVoidAsync("focusElement", "input0");
                return;
            }
            await JS.InvokeVoidAsync("clearInput", "input" + (++index).ToString());
            await JS.InvokeVoidAsync("enableElement", "input" + index.ToString());
            await JS.InvokeVoidAsync("focusElement", "input" + index.ToString());
        }
    }

    public async Task FocusLost(FocusEventArgs e ,int index)
    {
        await JS.InvokeVoidAsync("focusElement", "input" + index.ToString());
    }

    public class ConsoleLine
    {
        public int Index { get; }

        public bool IsDisabled { get; set; }

        public ConsoleLine(int index)
        {
            Index = index;
            IsDisabled = true;
        }
    }
}