@page "/containers/exec/{id}"
@inherits BaseComponent
@implements IAsyncDisposable
@inject IAccessTokenProvider AccessTokenProvider;
@inject IExecService ExecService;
@using Microsoft.AspNetCore.SignalR.Client
@using Docker.DotNet.Models;
@using Redpier.Web.UI.Extensions;

@*@layout EmptyLayout*@

@*<ConsoleWindow></ConsoleWindow>*@
<div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
        <button @onclick="Connect" disabled="@(connectionState.Equals(ConnectionState.Connecting) || connectionState.Equals(ConnectionState.Connected))">Connect</button>
        <button @onclick="Disconnect" disabled="@(connectionState.Equals(ConnectionState.Connecting) || connectionState.Equals(ConnectionState.Disconnected))">Disconnect</button>
        <textarea @bind="messageInput"/>
        @foreach (var message in messages)
        {
            <p>@message</p>
        }
        <button @onclick="Send">Send</button>
    </div>
</div>
@code {
    [Parameter]
    public string Id { get; set; }

    private HubConnection hubConnection;

    private string execId;

    private List<string> messages = new List<string>();

    private string messageInput;

    public enum ConnectionState
    {
        Disconnected = 0,
        Connecting = 1,
        Connected = 2
    }

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken();

        if (tokenResult.Status.Equals(AccessTokenResultStatus.Success))
        {
            tokenResult.TryGetToken(out AccessToken accessToken);

            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:5000/api/websocket/exec?endpoint=bnBpcGU6Ly8uL3BpcGUvZG9ja2VyX2VuZ2luZQ==", options =>
                        options.AccessTokenProvider = () => Task.FromResult(accessToken.Value)
                    )
                .Build();

            hubConnection.On<string>("receive", (response) =>
            {
                messages.Add(response);
                Console.WriteLine(response);
                StateHasChanged();
            });
        }

        //hubConnection.Closed += (error) =>
        //{
        //    Console.WriteLine(error);
        //    connectionState = ConnectionState.Disconnected;

        //    return Task.CompletedTask;
        //};
    }

    private ConnectionState connectionState = ConnectionState.Disconnected;

    protected async Task Connect()
    {
        connectionState = ConnectionState.Connecting;

        await Create();

        await hubConnection.StartAsync().ContinueWith(Task =>
        {
            connectionState = ConnectionState.Connected;
        });
    }

    async Task Create()
    {
        try
        {
            IsBusy = true;

            if (!string.IsNullOrWhiteSpace(execId))
                return;

            execId = await ExecService.CreateAsync(Id,
                new ContainerExecCreateParameters()
                {
                    AttachStderr = true,
                    AttachStdin = true,
                    AttachStdout = true,
                    Tty = true,
                    Cmd = new List<string>() { "sh" },
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsBusy = false;
        }
    }

    //private async Task Send(KeyboardEventArgs e)
    //{
    //    Console.WriteLine($"Code: {e.Code}, Key: {e.Key}, Type: {e.Type}");
    //    if(e.TryGetChar(out char key))
    //    {
    //        var output = await hubConnection.InvokeAsync<(string, string)>("send", execId, key, true);
    //        Console.WriteLine(output.Item1 + " || " + output.Item2);
    //        messageInput = string.Empty;
    //        StateHasChanged();
    //    }
    //}

    private async Task Send()
    {
        var output = await hubConnection.InvokeAsync<string>("send", execId, messageInput, true);
        Console.WriteLine("output: {0}", output);
        //messageInput = string.Empty;
        StateHasChanged();
    }

    protected async Task Disconnect()
    {
        execId = string.Empty;
        await hubConnection.StopAsync().ContinueWith(Task =>
        {
            connectionState = ConnectionState.Disconnected;
        });
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}