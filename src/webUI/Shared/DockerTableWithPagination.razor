@typeparam TItem

@if (IncludeRemoveButton)
{
    <div class="btn-group float-right">
        <button type="button" class="btn btn-sm btn-danger" @onclick="async ()=> { await RemoveAsync(); }" disabled="@(IsBusy || !SelectedItems.Any())">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@(!IsBusy)"></span>
            <span class="fa fa-trash" hidden="@(IsBusy)"></span> Remove
        </button>
    </div>
}
<div class="table-responsive py-2">
    <table class="table table-sm table-hover">
        <thead class="thead-light">
            <tr>
                <th><input type="checkbox" checked="@SelectedItems.Any()" @onclick="SelectAllAsync" /></th>
                @TableHeader
            </tr>
        </thead>
        <tbody>
            @if (Page != null)
            {
                @foreach (var item in Page.Items)
                {
                    <tr>
                        <td>
                            <input type="checkbox" checked="@SelectedItems.Contains(item)" @onclick="async () => { await SelectAsync(item); }" />
                        </td>
                        @TableRow(item)
                    </tr>
                }
            }
            else if (IsBusy)
            {
                <tr>
                    <td colspan="@ColSpan">
                        <div class="text-center dropdown-item">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td colspan="@ColSpan" class="text-center">No data</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@if (Page != null && Page.TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-end">
            <li class="page-item @(Page.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" tabindex="-1" @onclick="async () => await FetchNewPageAsync(Page.PageIndex - 1)">Previous</a>
            </li>
            @for (int i = 1; i <= Page.TotalPages; i++)
            {
                var index = i;
                <li class="page-item"><a class="page-link @(index == Page.PageIndex ? "active disabled" : "")" @onclick="async () => await FetchNewPageAsync(index)">@index</a></li>
            }
            <li class="page-item @(Page.HasNextPage ? "" : "disabled")">
                <a class="page-link" @onclick="async () => await FetchNewPageAsync(Page.PageIndex + 1)">Next</a>
            </li>
        </ul>
    </nav>
}