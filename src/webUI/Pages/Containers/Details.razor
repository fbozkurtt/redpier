@page "/containers/{Id}"
@using Docker.DotNet.Models

@if (PageLoaded)
{
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 15%">Status</th>
                        <th scope="col" style="width: 85%">Status</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>Name</th>
                        <td>@Container.Name.Trim('/')</td>
                    </tr>
                    <tr>
                        <th>ID</th>
                        <td>@Container.ID</td>
                    </tr>
                    <tr>
                        <th>IP address</th>
                        <td>@Container.NetworkSettings.IPAddress</td>
                    </tr>
                    <tr>
                        <th>Status</th>
                        <td>@Container.State.Status</td>
                    </tr>
                    <tr>
                        <th>Created</th>
                        <td>@Container.Created.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    </tr>
                    <tr>
                        <th>Started</th>
                        <td>@(Convert.ToDateTime(Container.State.StartedAt).ToString("yyyy-MM-dd HH:mm:ss"))</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 15%">Details</th>
                        <th scope="col" style="width: 85%"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>Image</th>
                        <td>@Container.Config.Image</td>
                    </tr>
                    <tr>
                        <th>Ports</th>
                        <td id="ports">
                            <div>
                                0.0.0.0:8000 <i class="fa fa-long-arrow-alt-right"></i> 8000/tcp
                            </div>
                            <div>
                                0.0.0.0:9000 <i class="fa fa-long-arrow-alt-right"></i> 9000/tcp
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <th>Command</th>
                        <td>
                            <table class="table table-borderless table-sm m-0" hidden="@(Container.Config.Cmd == null)">
                                <tbody>
                                    @if (Container.Config.Cmd != null)
                                    {
                                        @foreach (var cmd in Container.Config.Cmd)
                                        {
                                            <tr>
                                                <td>
                                                    @cmd
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <th>Entrypoint</th>
                        <td>
                            <table class="table table-borderless table-sm m-0" hidden="@(Container.Config.Entrypoint == null)">
                                <tbody>
                                    @if (Container.Config.Entrypoint != null)
                                    {
                                        @foreach (var ep in Container.Config.Entrypoint)
                                        {
                                            <tr>
                                                <td>
                                                    @ep
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <th>Environment</th>
                        <td>
                            <table class="table table-borderless table-sm m-0" hidden="@(Container.Config.Env == null)">
                                <tbody>
                                    @if (Container.Config.Env != null)
                                    {
                                        @foreach (var env in Container.Config.Env)
                                        {
                                            <tr>
                                                <td class="text-muted">@env.Split('=')[0]</td>
                                                <td class="text-muted">@env.Split('=')[1]</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <th>Restart behaviour</th>
                        <td>
                            <div class="form-group row">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="restartRadios" id="never" value="never" checked="@(Container.HostConfig.RestartPolicy.Name.Equals("no"))">
                                    <label class="form-check-label" for="never">
                                        Never
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="restartRadios" id="always" value="always" checked="@(Container.HostConfig.RestartPolicy.Name.Equals("always"))">
                                    <label class="form-check-label" for="always">
                                        Always
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="restartRadios" id="onFailure" value="onFailure" checked="@(Container.HostConfig.RestartPolicy.Name.Equals("on-failure"))">
                                    <label class="form-check-label" for="onFailure">
                                        On failure
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="restartRadios" id="unlessStopped" value="unlessStopped" checked="@(Container.HostConfig.RestartPolicy.Name.Equals("unless-stopped"))">
                                    <label class="form-check-label" for="unlessStopped">
                                        Unless stopped
                                    </label>
                                </div>
                                <button class="btn btn-primary">Update</button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 15%">Mounts</th>
                        <th scope="col" style="width: 42.5%">Status</th>
                        <th scope="col" style="width: 42.5%"></th>
                    </tr>
                </thead>
                <thead>
                    <tr>
                        <th scope="col">Volume name</th>
                        <th scope="col">Host path</th>
                        <th scope="col">Container path</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var mount in Container.Mounts)
                    {
                        <tr>

                            @if (mount.Type.Equals("volume"))
                            {
                                <td>@mount.Name</td>
                            }
                            else
                            {
                                <td class="text-muted">(bind mount)</td>
                            }
                            <td>@mount.Source</td>
                            <td>@mount.Destination</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12 table-responsive">
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 15%">Network</th>
                        <th scope="col" style="width: 21.25%"></th>
                        <th scope="col" style="width: 21.25%"></th>
                        <th scope="col" style="width: 21.25%">
                            <select class="form-control" id="network">
                                @foreach (var network in Networks)
                                {
                                    <option>@network.Name</option>
                                }
                            </select>
                        </th>
                        <th scope="col" style="width: 21.25%">
                            <a href="#" class="btn-sm btn-success">
                                <span class="fa fa-plus" /> Join
                            </a>
                        </th>
                    </tr>
                </thead>
                <thead>
                    <tr>
                        <th scope="col">Network</th>
                        <th scope="col">IP Address</th>
                        <th scope="col">Gateway</th>
                        <th scope="col">MAC Address</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var network in Container.NetworkSettings.Networks)
                    {
                        <tr>
                            <td>@network.Key</td>
                            <td>@network.Value.IPAddress</td>
                            <td>@network.Value.Gateway</td>
                            <td>@network.Value.MacAddress</td>
                            <td>
                                <button class="btn btn-sm btn-danger">
                                    <span class="fa fa-trash"></span> Leave
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12">
            <div class="text-center">
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
    </div>
}


@code{

    [Inject]
    public IContainerService ContainerService { get; set; }

    [Inject]
    public INetworkService NetworkService { get; set; }

    [Parameter]
    public string Id { get; set; }

    public bool PageLoaded { get; set; } = false;

    public ContainerInspectResponse Container { get; set; }

    public List<NetworkResponse> Networks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Container = await ContainerService.InspectAsync(Id);
        Networks = await NetworkService.GetAllAsync();
        PageLoaded = true;
    }
}
